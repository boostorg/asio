[/
 / Copyright (c) 2003-2023 Christopher M. Kohlhoff (chris at kohlhoff dot com)
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:ResolveToken Resolve token requirements]

A resolve token is a [link boost_asio.overview.model.completion_tokens completion
token] for completion signature `void(error_code,
ip::basic_resolver_results<InternetProtocol>)`, for a specified
`InternetProtocol`.

[heading Examples]

A free function as a resolve token:

  void resolve_handler(
      const boost::system::error_code& ec,
      boost::asio::ip::tcp::resolver::results_type results)
  {
    ...
  }

A resolve token function object:

  struct resolve_handler
  {
    ...
    void operator()(
        const boost::system::error_code& ec,
        boost::asio::ip::tcp::resolver::results_type results)
    {
      ...
    }
    ...
  };

A lambda as a resolve token:

  resolver.async_resolve(...,
      [](const boost::system::error_code& ec,
        boost::asio::ip::tcp::resolver::results_type results)
      {
        ...
      });

A non-static class member function adapted to a resolve token using
`std::bind()`:

  void my_class::resolve_handler(
      const boost::system::error_code& ec,
      boost::asio::ip::tcp::resolver::results_type results)
  {
    ...
  }
  ...
  resolver.async_resolve(...,
      std::bind(&my_class::resolve_handler,
        this, std::placeholders::_1,
        std::placeholders::_2));

A non-static class member function adapted to a resolve token using
`boost::bind()`:

  void my_class::resolve_handler(
      const boost::system::error_code& ec,
      boost::asio::ip::tcp::resolver::results_type results)
  {
    ...
  }
  ...
  resolver.async_resolve(...,
      boost::bind(&my_class::resolve_handler,
        this, boost::asio::placeholders::error,
        boost::asio::placeholders::results));

Using [link boost_asio.reference.use_future use_future] as a resolve token:

  std::future<boost::asio::ip::tcp::resolver::results_type> f =
    resolver.async_resolve(..., boost::asio::use_future);
  ...
  try
  {
    boost::asio::ip::tcp::resolver::results_type r = f.get();
    ...
  }
  catch (const system_error& e)
  {
    ...
  }

Using [link boost_asio.reference.use_awaitable use_awaitable] as a resolve token:

  boost::asio::awaitable<void> my_coroutine()
  {
    try
    {
      ...
      boost::asio::ip::tcp::resolver::results_type r =
        co_await resolver.async_resolve(
            ..., boost::asio::use_awaitable);
      ...
    }
    catch (const system_error& e)
    {
      ...
    }
  }

[endsect]
